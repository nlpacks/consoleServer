#配置日志记录的级别Level和日志输出的目的地位置Appender
log4j.rootLogger=ALL,console,file
#上面一行指定了日志记录的输出级别为ALL,同时指定了两个输出目的地

#配置日志记录的目的地
log4j.appender.console=org.apache.log4j.ConsoleAppender
#上面一行调用log4j中定义的目的地，输出到控制台界面
log4j.appender.file=org.apache.log4j.FileAppender
#上面一行调用log4j中定义的目的地，输出到文件当中

#配置console目的地的日志记录的格式
log4j.appender.console.layout=org.apache.log4j.PatternLayout
#上面一行将console的格式设置为log4j中己经定义了的格式类
log4j.appender.console.layout.ConversionPattern=[%d{yyyy-MM-dd HH:mm:ss}] %5p - %m%n
#上面一行设置console详细的格式　信息级别(占5个字符位置) [日志的线程]　日志的名称　- 日志消息　换行


#配置file日志记录的目的地的具体参数
log4j.appender.file.File=${curr}/server/server.log
#上面一行设置日志记录的位置和名称
log4j.appender.file.layout=org.apache.log4j.PatternLayout
#log4j.appender.file.layout=org.apache.log4j.HTMLLayout

#上面一行将file的格式设置为log4j中己经定义了的格式类
log4j.appender.file.layout.ConversionPattern=[%d{yyyy-MM-dd HH:mm:ss}] %5p - %m%n
#上面一行设置console详细的格式　信息级别(占5个字符位置) [日志的线程]　日志的名称　- 日志消息　换行
log4j.appender.file.Append=true
#上面一行设置file日志文件是以追加方式，如果日志文件己经存在，不覆盖原有的文件
log4j.appender.file.Threshold=ALL
#上面一行设置file日志记录的优先级别
